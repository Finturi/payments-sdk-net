using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CM.Payments.Client.Model;
using System.Reflection;
using CM.Payments.Client.Enums;

//<auto-generated>
//	IMPORTANT NOTE:
//	This code is generated by MessageUnitTestGenerator in this project.
//	Date and time: 06-04-2018 14:52:27
//
//	Changes to this file may cause incorrect behavior and will be lost on the next code generation.
//</auto-generated>
namespace CM.Payments.Client.Test
{
	[TestClass, ExcludeFromCodeCoverage]
	public partial class AfterPayDetailsResponseTests : BaseJsonConvertTests
	{
		public TestContext TestContext { get; set; }

		[TestMethod]
		public void AfterPayDetailsResponse()
		{
			var obj = new AfterPayDetailsResponse
			{
				AuthenticationUrl = "Lorum_737",
				BankAccountNumber = "Lorum_307",
				BillToAddress = new AfterPayDetailsRequest.OrderAddress
				{
					City = "Lorum_91",
					HouseNumber = 16,
					HouseNumberAddition = "Lorum_983",
					IsoCountryCode = "Lorum_910",
					PostalCode = "Lorum_125",
					Reference = new AfterPayDetailsRequest.OrderAddress.ReferencePerson
					{
						DateOfBirth = DateTime.Now,
						EmailAddress = "Lorum_316",
						Gender = "Lorum_811",
						Initials = "Lorum_27",
						IsoLanguage = "Lorum_772",
						LastName = "Lorum_226",
						PhoneNumber1 = "Lorum_384",
						PhoneNumber2 = "Lorum_608"
					},
					Region = "Lorum_83",
					StreetName = "Lorum_97"
				},
				CallbackUrl = "Lorum_991",
				CancelledUrl = "Lorum_705",
				ExpiredUrl = "Lorum_717",
				FailedUrl = "Lorum_287",
				InvoiceNumber = "Lorum_905",
				IpAddress = "Lorum_958",
				Orderline = new List<AfterPayDetailsRequest.OrderLine>
				{
					new AfterPayDetailsRequest.OrderLine
					{
						ArticleDescription = "Lorum_894",
						ArticleId = "Lorum_161",
						NetUnitPrice = 84,
						Quantity = 1,
						UnitPrice = 20,
						VatCategory = AfterPayVatCategory.Low
					},
					new AfterPayDetailsRequest.OrderLine
					{
						ArticleDescription = "Lorum_969",
						ArticleId = "Lorum_91",
						NetUnitPrice = 45,
						Quantity = 58,
						UnitPrice = 8,
						VatCategory = AfterPayVatCategory.Zero
					}
				},
				OrderNumber = "Lorum_768",
				Password = "Lorum_478",
				PortfolioId = 99,
				PurchaseId = "Lorum_408",
				Result = new AfterPayDetailsResponse.ResultResponse
				{
					Checksum = "Lorum_551",
					OrderReference = "Lorum_526",
					ResultId = 18,
					StatusCode = "Lorum_918",
					TimestampIn = "Lorum_404",
					TimestampOut = "Lorum_219",
					TotalInvoicedAmount = 6,
					TotalReservedAmount = 41,
					TransactionId = "Lorum_95"
				},
				ShipToAddress = new AfterPayDetailsRequest.OrderAddress
				{
					City = "Lorum_945",
					HouseNumber = 86,
					HouseNumberAddition = "Lorum_338",
					IsoCountryCode = "Lorum_352",
					PostalCode = "Lorum_393",
					Reference = new AfterPayDetailsRequest.OrderAddress.ReferencePerson
					{
						DateOfBirth = DateTime.Now,
						EmailAddress = "Lorum_867",
						Gender = "Lorum_944",
						Initials = "Lorum_618",
						IsoLanguage = "Lorum_778",
						LastName = "Lorum_412",
						PhoneNumber1 = "Lorum_930",
						PhoneNumber2 = "Lorum_312"
					},
					Region = "Lorum_979",
					StreetName = "Lorum_711"
				},
				SuccessUrl = "Lorum_680",
				TotalOrderAmount = 35
			};
			var deserialized = ConversionTest(obj);
			Assert.IsNotNull(deserialized);
			Assert.AreEqual(obj.AuthenticationUrl, deserialized.AuthenticationUrl);
			Assert.AreEqual(obj.BankAccountNumber, deserialized.BankAccountNumber);
			Assert.AreEqual(obj.BillToAddress.City, deserialized.BillToAddress.City);
			Assert.AreEqual(obj.BillToAddress.HouseNumber, deserialized.BillToAddress.HouseNumber);
			Assert.AreEqual(obj.BillToAddress.HouseNumberAddition, deserialized.BillToAddress.HouseNumberAddition);
			Assert.AreEqual(obj.BillToAddress.IsoCountryCode, deserialized.BillToAddress.IsoCountryCode);
			Assert.AreEqual(obj.BillToAddress.PostalCode, deserialized.BillToAddress.PostalCode);
			// Check only date and time up to seconds.. Json.NET does not save milliseconds.
			Assert.AreEqual(
				new DateTime(obj.BillToAddress.Reference.DateOfBirth.Year, obj.BillToAddress.Reference.DateOfBirth.Month, obj.BillToAddress.Reference.DateOfBirth.Day, obj.BillToAddress.Reference.DateOfBirth.Hour, obj.BillToAddress.Reference.DateOfBirth.Minute, obj.BillToAddress.Reference.DateOfBirth.Second),
				new DateTime(deserialized.BillToAddress.Reference.DateOfBirth.Year, deserialized.BillToAddress.Reference.DateOfBirth.Month, deserialized.BillToAddress.Reference.DateOfBirth.Day, deserialized.BillToAddress.Reference.DateOfBirth.Hour, deserialized.BillToAddress.Reference.DateOfBirth.Minute, deserialized.BillToAddress.Reference.DateOfBirth.Second));
			Assert.AreEqual(obj.BillToAddress.Reference.EmailAddress, deserialized.BillToAddress.Reference.EmailAddress);
			Assert.AreEqual(obj.BillToAddress.Reference.Gender, deserialized.BillToAddress.Reference.Gender);
			Assert.AreEqual(obj.BillToAddress.Reference.Initials, deserialized.BillToAddress.Reference.Initials);
			Assert.AreEqual(obj.BillToAddress.Reference.IsoLanguage, deserialized.BillToAddress.Reference.IsoLanguage);
			Assert.AreEqual(obj.BillToAddress.Reference.LastName, deserialized.BillToAddress.Reference.LastName);
			Assert.AreEqual(obj.BillToAddress.Reference.PhoneNumber1, deserialized.BillToAddress.Reference.PhoneNumber1);
			Assert.AreEqual(obj.BillToAddress.Reference.PhoneNumber2, deserialized.BillToAddress.Reference.PhoneNumber2);
			Assert.AreEqual(obj.BillToAddress.Region, deserialized.BillToAddress.Region);
			Assert.AreEqual(obj.BillToAddress.StreetName, deserialized.BillToAddress.StreetName);
			Assert.AreEqual(obj.CallbackUrl, deserialized.CallbackUrl);
			Assert.AreEqual(obj.CancelledUrl, deserialized.CancelledUrl);
			Assert.AreEqual(obj.ExpiredUrl, deserialized.ExpiredUrl);
			Assert.AreEqual(obj.FailedUrl, deserialized.FailedUrl);
			Assert.AreEqual(obj.InvoiceNumber, deserialized.InvoiceNumber);
			Assert.AreEqual(obj.IpAddress, deserialized.IpAddress);
			Assert.AreEqual(obj.Orderline?.Count(), deserialized.Orderline?.Count());
			for(var orderlineIndex = 0; orderlineIndex < obj.Orderline.Count(); orderlineIndex++)
			{
				var expectedOrderLineInOrderline = obj.Orderline.ElementAt(orderlineIndex) as AfterPayDetailsRequest.OrderLine;
				var actualOrderLineInOrderline = deserialized.Orderline.ElementAt(orderlineIndex) as AfterPayDetailsRequest.OrderLine;
					Assert.AreEqual(expectedOrderLineInOrderline.ArticleDescription, actualOrderLineInOrderline.ArticleDescription);
					Assert.AreEqual(expectedOrderLineInOrderline.ArticleId, actualOrderLineInOrderline.ArticleId);
					Assert.AreEqual(expectedOrderLineInOrderline.NetUnitPrice, actualOrderLineInOrderline.NetUnitPrice);
					Assert.AreEqual(expectedOrderLineInOrderline.Quantity, actualOrderLineInOrderline.Quantity);
					Assert.AreEqual(expectedOrderLineInOrderline.UnitPrice, actualOrderLineInOrderline.UnitPrice);
					Assert.AreEqual(expectedOrderLineInOrderline.VatCategory, actualOrderLineInOrderline.VatCategory);
			}
			Assert.AreEqual(obj.OrderNumber, deserialized.OrderNumber);
			Assert.AreEqual(obj.Password, deserialized.Password);
			Assert.AreEqual(obj.PortfolioId, deserialized.PortfolioId);
			Assert.AreEqual(obj.PurchaseId, deserialized.PurchaseId);
			Assert.AreEqual(obj.Result.Checksum, deserialized.Result.Checksum);
			Assert.AreEqual(obj.Result.OrderReference, deserialized.Result.OrderReference);
			Assert.AreEqual(obj.Result.ResultId, deserialized.Result.ResultId);
			Assert.AreEqual(obj.Result.StatusCode, deserialized.Result.StatusCode);
			Assert.AreEqual(obj.Result.TimestampIn, deserialized.Result.TimestampIn);
			Assert.AreEqual(obj.Result.TimestampOut, deserialized.Result.TimestampOut);
			Assert.AreEqual(obj.Result.TotalInvoicedAmount, deserialized.Result.TotalInvoicedAmount);
			Assert.AreEqual(obj.Result.TotalReservedAmount, deserialized.Result.TotalReservedAmount);
			Assert.AreEqual(obj.Result.TransactionId, deserialized.Result.TransactionId);
			Assert.AreEqual(obj.ShipToAddress.City, deserialized.ShipToAddress.City);
			Assert.AreEqual(obj.ShipToAddress.HouseNumber, deserialized.ShipToAddress.HouseNumber);
			Assert.AreEqual(obj.ShipToAddress.HouseNumberAddition, deserialized.ShipToAddress.HouseNumberAddition);
			Assert.AreEqual(obj.ShipToAddress.IsoCountryCode, deserialized.ShipToAddress.IsoCountryCode);
			Assert.AreEqual(obj.ShipToAddress.PostalCode, deserialized.ShipToAddress.PostalCode);
			// Check only date and time up to seconds.. Json.NET does not save milliseconds.
			Assert.AreEqual(
				new DateTime(obj.ShipToAddress.Reference.DateOfBirth.Year, obj.ShipToAddress.Reference.DateOfBirth.Month, obj.ShipToAddress.Reference.DateOfBirth.Day, obj.ShipToAddress.Reference.DateOfBirth.Hour, obj.ShipToAddress.Reference.DateOfBirth.Minute, obj.ShipToAddress.Reference.DateOfBirth.Second),
				new DateTime(deserialized.ShipToAddress.Reference.DateOfBirth.Year, deserialized.ShipToAddress.Reference.DateOfBirth.Month, deserialized.ShipToAddress.Reference.DateOfBirth.Day, deserialized.ShipToAddress.Reference.DateOfBirth.Hour, deserialized.ShipToAddress.Reference.DateOfBirth.Minute, deserialized.ShipToAddress.Reference.DateOfBirth.Second));
			Assert.AreEqual(obj.ShipToAddress.Reference.EmailAddress, deserialized.ShipToAddress.Reference.EmailAddress);
			Assert.AreEqual(obj.ShipToAddress.Reference.Gender, deserialized.ShipToAddress.Reference.Gender);
			Assert.AreEqual(obj.ShipToAddress.Reference.Initials, deserialized.ShipToAddress.Reference.Initials);
			Assert.AreEqual(obj.ShipToAddress.Reference.IsoLanguage, deserialized.ShipToAddress.Reference.IsoLanguage);
			Assert.AreEqual(obj.ShipToAddress.Reference.LastName, deserialized.ShipToAddress.Reference.LastName);
			Assert.AreEqual(obj.ShipToAddress.Reference.PhoneNumber1, deserialized.ShipToAddress.Reference.PhoneNumber1);
			Assert.AreEqual(obj.ShipToAddress.Reference.PhoneNumber2, deserialized.ShipToAddress.Reference.PhoneNumber2);
			Assert.AreEqual(obj.ShipToAddress.Region, deserialized.ShipToAddress.Region);
			Assert.AreEqual(obj.ShipToAddress.StreetName, deserialized.ShipToAddress.StreetName);
			Assert.AreEqual(obj.SuccessUrl, deserialized.SuccessUrl);
			Assert.AreEqual(obj.TotalOrderAmount, deserialized.TotalOrderAmount);
		}
	}
}
