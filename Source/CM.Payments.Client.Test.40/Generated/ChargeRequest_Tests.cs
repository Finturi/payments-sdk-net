using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CM.Payments.Client.Model;
using CM.Payments.Client.Enums;

//<auto-generated>
//	IMPORTANT NOTE:
//	This code is generated by MessageUnitTestGenerator in this project.
//	Date and time: 06-04-2018 14:52:27
//
//	Changes to this file may cause incorrect behavior and will be lost on the next code generation.
//</auto-generated>
namespace CM.Payments.Client.Test
{
	[TestClass, ExcludeFromCodeCoverage]
	public partial class ChargeRequestTests : BaseJsonConvertTests
	{
		public TestContext TestContext { get; set; }

		[TestMethod]
		public void ChargeRequest()
		{
			var obj = new ChargeRequest
			{
				Amount = 73,
				Currency = "Lorum_837",
				Payments = new List<PaymentRequest>
				{
					new AfterPayPaymentRequest
					{
						Amount = 68,
						Currency = "Lorum_451",
						Details = new AfterPayDetailsRequest
						{
							BankAccountNumber = "Lorum_104",
							BillToAddress = new AfterPayDetailsRequest.OrderAddress
							{
								City = "Lorum_613",
								HouseNumber = 22,
								HouseNumberAddition = "Lorum_834",
								IsoCountryCode = "Lorum_919",
								PostalCode = "Lorum_730",
								Reference = new AfterPayDetailsRequest.OrderAddress.ReferencePerson
								{
									DateOfBirth = DateTime.Now,
									EmailAddress = "Lorum_803",
									Gender = "Lorum_635",
									Initials = "Lorum_449",
									IsoLanguage = "Lorum_436",
									LastName = "Lorum_374",
									PhoneNumber1 = "Lorum_867",
									PhoneNumber2 = "Lorum_230"
								},
								Region = "Lorum_870",
								StreetName = "Lorum_142"
							},
							CallbackUrl = "Lorum_490",
							CancelledUrl = "Lorum_919",
							ExpiredUrl = "Lorum_214",
							FailedUrl = "Lorum_237",
							InvoiceNumber = "Lorum_383",
							IpAddress = "Lorum_312",
							Orderline = new List<AfterPayDetailsRequest.OrderLine>
							{
								new AfterPayDetailsRequest.OrderLine
								{
									ArticleDescription = "Lorum_376",
									ArticleId = "Lorum_641",
									NetUnitPrice = 72,
									Quantity = 29,
									UnitPrice = 81,
									VatCategory = AfterPayVatCategory.Low
								},
								new AfterPayDetailsRequest.OrderLine
								{
									ArticleDescription = "Lorum_458",
									ArticleId = "Lorum_684",
									NetUnitPrice = 8,
									Quantity = 27,
									UnitPrice = 64,
									VatCategory = AfterPayVatCategory.None
								}
							},
							OrderNumber = "Lorum_257",
							Password = "Lorum_533",
							PortfolioId = 15,
							PurchaseId = "Lorum_453",
							ShipToAddress = new AfterPayDetailsRequest.OrderAddress
							{
								City = "Lorum_753",
								HouseNumber = 24,
								HouseNumberAddition = "Lorum_39",
								IsoCountryCode = "Lorum_389",
								PostalCode = "Lorum_334",
								Reference = new AfterPayDetailsRequest.OrderAddress.ReferencePerson
								{
									DateOfBirth = DateTime.Now,
									EmailAddress = "Lorum_158",
									Gender = "Lorum_581",
									Initials = "Lorum_96",
									IsoLanguage = "Lorum_634",
									LastName = "Lorum_684",
									PhoneNumber1 = "Lorum_556",
									PhoneNumber2 = "Lorum_484"
								},
								Region = "Lorum_238",
								StreetName = "Lorum_178"
							},
							SuccessUrl = "Lorum_622",
							TotalOrderAmount = 45
						},
						DueDate = DateTime.Now
					},
					new AfterPayPaymentRequest
					{
						Amount = 20,
						Currency = "Lorum_728",
						Details = new AfterPayDetailsRequest
						{
							BankAccountNumber = "Lorum_972",
							BillToAddress = new AfterPayDetailsRequest.OrderAddress
							{
								City = "Lorum_504",
								HouseNumber = 55,
								HouseNumberAddition = "Lorum_104",
								IsoCountryCode = "Lorum_384",
								PostalCode = "Lorum_344",
								Reference = new AfterPayDetailsRequest.OrderAddress.ReferencePerson
								{
									DateOfBirth = DateTime.Now,
									EmailAddress = "Lorum_950",
									Gender = "Lorum_376",
									Initials = "Lorum_170",
									IsoLanguage = "Lorum_736",
									LastName = "Lorum_907",
									PhoneNumber1 = "Lorum_972",
									PhoneNumber2 = "Lorum_337"
								},
								Region = "Lorum_999",
								StreetName = "Lorum_36"
							},
							CallbackUrl = "Lorum_165",
							CancelledUrl = "Lorum_973",
							ExpiredUrl = "Lorum_197",
							FailedUrl = "Lorum_993",
							InvoiceNumber = "Lorum_977",
							IpAddress = "Lorum_217",
							Orderline = new List<AfterPayDetailsRequest.OrderLine>
							{
								new AfterPayDetailsRequest.OrderLine
								{
									ArticleDescription = "Lorum_59",
									ArticleId = "Lorum_621",
									NetUnitPrice = 65,
									Quantity = 13,
									UnitPrice = 79,
									VatCategory = AfterPayVatCategory.None
								},
								new AfterPayDetailsRequest.OrderLine
								{
									ArticleDescription = "Lorum_445",
									ArticleId = "Lorum_893",
									NetUnitPrice = 64,
									Quantity = 20,
									UnitPrice = 76,
									VatCategory = AfterPayVatCategory.High
								}
							},
							OrderNumber = "Lorum_805",
							Password = "Lorum_170",
							PortfolioId = 94,
							PurchaseId = "Lorum_206",
							ShipToAddress = new AfterPayDetailsRequest.OrderAddress
							{
								City = "Lorum_136",
								HouseNumber = 65,
								HouseNumberAddition = "Lorum_44",
								IsoCountryCode = "Lorum_383",
								PostalCode = "Lorum_781",
								Reference = new AfterPayDetailsRequest.OrderAddress.ReferencePerson
								{
									DateOfBirth = DateTime.Now,
									EmailAddress = "Lorum_411",
									Gender = "Lorum_359",
									Initials = "Lorum_727",
									IsoLanguage = "Lorum_712",
									LastName = "Lorum_219",
									PhoneNumber1 = "Lorum_484",
									PhoneNumber2 = "Lorum_201"
								},
								Region = "Lorum_12",
								StreetName = "Lorum_649"
							},
							SuccessUrl = "Lorum_247",
							TotalOrderAmount = 21
						},
						DueDate = DateTime.Now
					}
				}
			};
			var deserialized = ConversionTest(obj);
			Assert.IsNotNull(deserialized);
			Assert.AreEqual(obj.Amount, deserialized.Amount);
			Assert.AreEqual(obj.Currency, deserialized.Currency);
			Assert.AreEqual(obj.Payments?.Count(), deserialized.Payments?.Count());
			for(var paymentsIndex = 0; paymentsIndex < obj.Payments.Count(); paymentsIndex++)
			{
				var expectedAfterPayPaymentRequestInPayments = obj.Payments.ElementAt(paymentsIndex) as AfterPayPaymentRequest;
				var actualAfterPayPaymentRequestInPayments = deserialized.Payments.ElementAt(paymentsIndex) as AfterPayPaymentRequest;
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Amount, actualAfterPayPaymentRequestInPayments.Amount);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Currency, actualAfterPayPaymentRequestInPayments.Currency);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.BankAccountNumber, actualAfterPayPaymentRequestInPayments.Details.BankAccountNumber);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.BillToAddress.City, actualAfterPayPaymentRequestInPayments.Details.BillToAddress.City);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.BillToAddress.HouseNumber, actualAfterPayPaymentRequestInPayments.Details.BillToAddress.HouseNumber);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.BillToAddress.HouseNumberAddition, actualAfterPayPaymentRequestInPayments.Details.BillToAddress.HouseNumberAddition);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.BillToAddress.IsoCountryCode, actualAfterPayPaymentRequestInPayments.Details.BillToAddress.IsoCountryCode);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.BillToAddress.PostalCode, actualAfterPayPaymentRequestInPayments.Details.BillToAddress.PostalCode);
					// Check only date and time up to seconds.. Json.NET does not save milliseconds.
					Assert.AreEqual(
						new DateTime(expectedAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.DateOfBirth.Year, expectedAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.DateOfBirth.Month, expectedAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.DateOfBirth.Day, expectedAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.DateOfBirth.Hour, expectedAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.DateOfBirth.Minute, expectedAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.DateOfBirth.Second),
						new DateTime(actualAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.DateOfBirth.Year, actualAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.DateOfBirth.Month, actualAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.DateOfBirth.Day, actualAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.DateOfBirth.Hour, actualAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.DateOfBirth.Minute, actualAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.DateOfBirth.Second));
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.EmailAddress, actualAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.EmailAddress);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.Gender, actualAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.Gender);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.Initials, actualAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.Initials);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.IsoLanguage, actualAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.IsoLanguage);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.LastName, actualAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.LastName);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.PhoneNumber1, actualAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.PhoneNumber1);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.PhoneNumber2, actualAfterPayPaymentRequestInPayments.Details.BillToAddress.Reference.PhoneNumber2);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.BillToAddress.Region, actualAfterPayPaymentRequestInPayments.Details.BillToAddress.Region);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.BillToAddress.StreetName, actualAfterPayPaymentRequestInPayments.Details.BillToAddress.StreetName);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.CallbackUrl, actualAfterPayPaymentRequestInPayments.Details.CallbackUrl);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.CancelledUrl, actualAfterPayPaymentRequestInPayments.Details.CancelledUrl);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.ExpiredUrl, actualAfterPayPaymentRequestInPayments.Details.ExpiredUrl);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.FailedUrl, actualAfterPayPaymentRequestInPayments.Details.FailedUrl);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.InvoiceNumber, actualAfterPayPaymentRequestInPayments.Details.InvoiceNumber);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.IpAddress, actualAfterPayPaymentRequestInPayments.Details.IpAddress);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.Orderline?.Count(), actualAfterPayPaymentRequestInPayments.Details.Orderline?.Count());
					for(var orderlineIndex = 0; orderlineIndex < expectedAfterPayPaymentRequestInPayments.Details.Orderline.Count(); orderlineIndex++)
					{
						var expectedOrderLineInOrderline = expectedAfterPayPaymentRequestInPayments.Details.Orderline.ElementAt(orderlineIndex) as AfterPayDetailsRequest.OrderLine;
						var actualOrderLineInOrderline = actualAfterPayPaymentRequestInPayments.Details.Orderline.ElementAt(orderlineIndex) as AfterPayDetailsRequest.OrderLine;
							Assert.AreEqual(expectedOrderLineInOrderline.ArticleDescription, actualOrderLineInOrderline.ArticleDescription);
							Assert.AreEqual(expectedOrderLineInOrderline.ArticleId, actualOrderLineInOrderline.ArticleId);
							Assert.AreEqual(expectedOrderLineInOrderline.NetUnitPrice, actualOrderLineInOrderline.NetUnitPrice);
							Assert.AreEqual(expectedOrderLineInOrderline.Quantity, actualOrderLineInOrderline.Quantity);
							Assert.AreEqual(expectedOrderLineInOrderline.UnitPrice, actualOrderLineInOrderline.UnitPrice);
							Assert.AreEqual(expectedOrderLineInOrderline.VatCategory, actualOrderLineInOrderline.VatCategory);
					}
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.OrderNumber, actualAfterPayPaymentRequestInPayments.Details.OrderNumber);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.Password, actualAfterPayPaymentRequestInPayments.Details.Password);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.PortfolioId, actualAfterPayPaymentRequestInPayments.Details.PortfolioId);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.PurchaseId, actualAfterPayPaymentRequestInPayments.Details.PurchaseId);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.ShipToAddress.City, actualAfterPayPaymentRequestInPayments.Details.ShipToAddress.City);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.ShipToAddress.HouseNumber, actualAfterPayPaymentRequestInPayments.Details.ShipToAddress.HouseNumber);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.ShipToAddress.HouseNumberAddition, actualAfterPayPaymentRequestInPayments.Details.ShipToAddress.HouseNumberAddition);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.ShipToAddress.IsoCountryCode, actualAfterPayPaymentRequestInPayments.Details.ShipToAddress.IsoCountryCode);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.ShipToAddress.PostalCode, actualAfterPayPaymentRequestInPayments.Details.ShipToAddress.PostalCode);
					// Check only date and time up to seconds.. Json.NET does not save milliseconds.
					Assert.AreEqual(
						new DateTime(expectedAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.DateOfBirth.Year, expectedAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.DateOfBirth.Month, expectedAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.DateOfBirth.Day, expectedAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.DateOfBirth.Hour, expectedAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.DateOfBirth.Minute, expectedAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.DateOfBirth.Second),
						new DateTime(actualAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.DateOfBirth.Year, actualAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.DateOfBirth.Month, actualAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.DateOfBirth.Day, actualAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.DateOfBirth.Hour, actualAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.DateOfBirth.Minute, actualAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.DateOfBirth.Second));
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.EmailAddress, actualAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.EmailAddress);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.Gender, actualAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.Gender);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.Initials, actualAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.Initials);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.IsoLanguage, actualAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.IsoLanguage);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.LastName, actualAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.LastName);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.PhoneNumber1, actualAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.PhoneNumber1);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.PhoneNumber2, actualAfterPayPaymentRequestInPayments.Details.ShipToAddress.Reference.PhoneNumber2);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.ShipToAddress.Region, actualAfterPayPaymentRequestInPayments.Details.ShipToAddress.Region);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.ShipToAddress.StreetName, actualAfterPayPaymentRequestInPayments.Details.ShipToAddress.StreetName);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.SuccessUrl, actualAfterPayPaymentRequestInPayments.Details.SuccessUrl);
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.Details.TotalOrderAmount, actualAfterPayPaymentRequestInPayments.Details.TotalOrderAmount);
					// Check only date and time up to seconds.. Json.NET does not save milliseconds.
					Assert.AreEqual(expectedAfterPayPaymentRequestInPayments.DueDate.HasValue, actualAfterPayPaymentRequestInPayments.DueDate.HasValue);
					if (expectedAfterPayPaymentRequestInPayments.DueDate.HasValue && actualAfterPayPaymentRequestInPayments.DueDate.HasValue)
					{
						Assert.AreEqual(
							new DateTime(expectedAfterPayPaymentRequestInPayments.DueDate.Value.Year, expectedAfterPayPaymentRequestInPayments.DueDate.Value.Month, expectedAfterPayPaymentRequestInPayments.DueDate.Value.Day, expectedAfterPayPaymentRequestInPayments.DueDate.Value.Hour, expectedAfterPayPaymentRequestInPayments.DueDate.Value.Minute, expectedAfterPayPaymentRequestInPayments.DueDate.Value.Second),
							new DateTime(actualAfterPayPaymentRequestInPayments.DueDate.Value.Year, actualAfterPayPaymentRequestInPayments.DueDate.Value.Month, actualAfterPayPaymentRequestInPayments.DueDate.Value.Day, actualAfterPayPaymentRequestInPayments.DueDate.Value.Hour, actualAfterPayPaymentRequestInPayments.DueDate.Value.Minute, actualAfterPayPaymentRequestInPayments.DueDate.Value.Second));
					}
			}
		}
	}
}
