using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CM.Payments.Client.Model;
using System.Reflection;
using CM.Payments.Client.Enums;

//<auto-generated>
//	IMPORTANT NOTE:
//	This code is generated by MessageUnitTestGenerator in this project.
//	Date and time: 06-04-2018 14:52:28
//
//	Changes to this file may cause incorrect behavior and will be lost on the next code generation.
//</auto-generated>
namespace CM.Payments.Client.Test
{
	[TestClass, ExcludeFromCodeCoverage]
	public partial class RefundRequestTests : BaseJsonConvertTests
	{
		public TestContext TestContext { get; set; }

		[TestMethod]
		public void RefundRequest()
		{
			var obj = new RefundRequest
			{
				Amount = 37,
				Currency = "Lorum_677",
				Details = new AfterPayRefundDetailsRequest
				{
					CreditInvoiceNumber = "Lorum_140"
				},
				PaymentId = "Lorum_932",
				Reason = "Lorum_452"
			};
			var deserialized = ConversionTest(obj);
			Assert.IsNotNull(deserialized);
			Assert.AreEqual(obj.Amount, deserialized.Amount);
			Assert.AreEqual(obj.Currency, deserialized.Currency);
			// cast to concrete type (innerPropType: CM.Payments.Client.Model.AfterPayRefundDetailsRequest - prop.PropertyType: CM.Payments.Client.Model.RefundDetailsRequest
			var castExpectedDetails = obj.Details as AfterPayRefundDetailsRequest;
			var castActualDetails = deserialized.Details as AfterPayRefundDetailsRequest;
			Assert.IsNotNull(castExpectedDetails);
			Assert.IsNotNull(castActualDetails);
			Assert.AreEqual(castExpectedDetails.CreditInvoiceNumber, castActualDetails.CreditInvoiceNumber);
			Assert.AreEqual(castExpectedDetails.Method, castActualDetails.Method);
			Assert.AreEqual(obj.PaymentId, deserialized.PaymentId);
			Assert.AreEqual(obj.Reason, deserialized.Reason);
		}
	}
}
