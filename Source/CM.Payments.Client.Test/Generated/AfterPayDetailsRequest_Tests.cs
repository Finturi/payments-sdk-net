using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CM.Payments.Client.Model;
using System.Reflection;
using CM.Payments.Client.Enums;

//<auto-generated>
//	IMPORTANT NOTE:
//	This code is generated by MessageUnitTestGenerator in this project.
//	Date and time: 06-04-2018 14:52:27
//
//	Changes to this file may cause incorrect behavior and will be lost on the next code generation.
//</auto-generated>
namespace CM.Payments.Client.Test
{
	[TestClass, ExcludeFromCodeCoverage]
	public partial class AfterPayDetailsRequestTests : BaseJsonConvertTests
	{
		public TestContext TestContext { get; set; }

		[TestMethod]
		public void AfterPayDetailsRequest()
		{
			var obj = new AfterPayDetailsRequest
			{
				BankAccountNumber = "Lorum_81",
				BillToAddress = new AfterPayDetailsRequest.OrderAddress
				{
					City = "Lorum_640",
					HouseNumber = 47,
					HouseNumberAddition = "Lorum_664",
					IsoCountryCode = "Lorum_518",
					PostalCode = "Lorum_722",
					Reference = new AfterPayDetailsRequest.OrderAddress.ReferencePerson
					{
						DateOfBirth = DateTime.Now,
						EmailAddress = "Lorum_246",
						Gender = "Lorum_575",
						Initials = "Lorum_937",
						IsoLanguage = "Lorum_531",
						LastName = "Lorum_649",
						PhoneNumber1 = "Lorum_114",
						PhoneNumber2 = "Lorum_869"
					},
					Region = "Lorum_180",
					StreetName = "Lorum_557"
				},
				CallbackUrl = "Lorum_241",
				CancelledUrl = "Lorum_154",
				ExpiredUrl = "Lorum_586",
				FailedUrl = "Lorum_140",
				InvoiceNumber = "Lorum_174",
				IpAddress = "Lorum_142",
				Orderline = new List<AfterPayDetailsRequest.OrderLine>
				{
					new AfterPayDetailsRequest.OrderLine
					{
						ArticleDescription = "Lorum_990",
						ArticleId = "Lorum_483",
						NetUnitPrice = 48,
						Quantity = 75,
						UnitPrice = 39,
						VatCategory = AfterPayVatCategory.Low
					},
					new AfterPayDetailsRequest.OrderLine
					{
						ArticleDescription = "Lorum_435",
						ArticleId = "Lorum_548",
						NetUnitPrice = 17,
						Quantity = 31,
						UnitPrice = 27,
						VatCategory = AfterPayVatCategory.Zero
					}
				},
				OrderNumber = "Lorum_785",
				Password = "Lorum_82",
				PortfolioId = 56,
				PurchaseId = "Lorum_535",
				ShipToAddress = new AfterPayDetailsRequest.OrderAddress
				{
					City = "Lorum_436",
					HouseNumber = 30,
					HouseNumberAddition = "Lorum_235",
					IsoCountryCode = "Lorum_215",
					PostalCode = "Lorum_247",
					Reference = new AfterPayDetailsRequest.OrderAddress.ReferencePerson
					{
						DateOfBirth = DateTime.Now,
						EmailAddress = "Lorum_829",
						Gender = "Lorum_639",
						Initials = "Lorum_479",
						IsoLanguage = "Lorum_554",
						LastName = "Lorum_947",
						PhoneNumber1 = "Lorum_436",
						PhoneNumber2 = "Lorum_343"
					},
					Region = "Lorum_98",
					StreetName = "Lorum_584"
				},
				SuccessUrl = "Lorum_231",
				TotalOrderAmount = 52
			};
			var deserialized = ConversionTest(obj);
			Assert.IsNotNull(deserialized);
			Assert.AreEqual(obj.BankAccountNumber, deserialized.BankAccountNumber);
			Assert.AreEqual(obj.BillToAddress.City, deserialized.BillToAddress.City);
			Assert.AreEqual(obj.BillToAddress.HouseNumber, deserialized.BillToAddress.HouseNumber);
			Assert.AreEqual(obj.BillToAddress.HouseNumberAddition, deserialized.BillToAddress.HouseNumberAddition);
			Assert.AreEqual(obj.BillToAddress.IsoCountryCode, deserialized.BillToAddress.IsoCountryCode);
			Assert.AreEqual(obj.BillToAddress.PostalCode, deserialized.BillToAddress.PostalCode);
			// Check only date and time up to seconds.. Json.NET does not save milliseconds.
			Assert.AreEqual(
				new DateTime(obj.BillToAddress.Reference.DateOfBirth.Year, obj.BillToAddress.Reference.DateOfBirth.Month, obj.BillToAddress.Reference.DateOfBirth.Day, obj.BillToAddress.Reference.DateOfBirth.Hour, obj.BillToAddress.Reference.DateOfBirth.Minute, obj.BillToAddress.Reference.DateOfBirth.Second),
				new DateTime(deserialized.BillToAddress.Reference.DateOfBirth.Year, deserialized.BillToAddress.Reference.DateOfBirth.Month, deserialized.BillToAddress.Reference.DateOfBirth.Day, deserialized.BillToAddress.Reference.DateOfBirth.Hour, deserialized.BillToAddress.Reference.DateOfBirth.Minute, deserialized.BillToAddress.Reference.DateOfBirth.Second));
			Assert.AreEqual(obj.BillToAddress.Reference.EmailAddress, deserialized.BillToAddress.Reference.EmailAddress);
			Assert.AreEqual(obj.BillToAddress.Reference.Gender, deserialized.BillToAddress.Reference.Gender);
			Assert.AreEqual(obj.BillToAddress.Reference.Initials, deserialized.BillToAddress.Reference.Initials);
			Assert.AreEqual(obj.BillToAddress.Reference.IsoLanguage, deserialized.BillToAddress.Reference.IsoLanguage);
			Assert.AreEqual(obj.BillToAddress.Reference.LastName, deserialized.BillToAddress.Reference.LastName);
			Assert.AreEqual(obj.BillToAddress.Reference.PhoneNumber1, deserialized.BillToAddress.Reference.PhoneNumber1);
			Assert.AreEqual(obj.BillToAddress.Reference.PhoneNumber2, deserialized.BillToAddress.Reference.PhoneNumber2);
			Assert.AreEqual(obj.BillToAddress.Region, deserialized.BillToAddress.Region);
			Assert.AreEqual(obj.BillToAddress.StreetName, deserialized.BillToAddress.StreetName);
			Assert.AreEqual(obj.CallbackUrl, deserialized.CallbackUrl);
			Assert.AreEqual(obj.CancelledUrl, deserialized.CancelledUrl);
			Assert.AreEqual(obj.ExpiredUrl, deserialized.ExpiredUrl);
			Assert.AreEqual(obj.FailedUrl, deserialized.FailedUrl);
			Assert.AreEqual(obj.InvoiceNumber, deserialized.InvoiceNumber);
			Assert.AreEqual(obj.IpAddress, deserialized.IpAddress);
			Assert.AreEqual(obj.Orderline?.Count(), deserialized.Orderline?.Count());
			for(var orderlineIndex = 0; orderlineIndex < obj.Orderline.Count(); orderlineIndex++)
			{
				var expectedOrderLineInOrderline = obj.Orderline.ElementAt(orderlineIndex) as AfterPayDetailsRequest.OrderLine;
				var actualOrderLineInOrderline = deserialized.Orderline.ElementAt(orderlineIndex) as AfterPayDetailsRequest.OrderLine;
					Assert.AreEqual(expectedOrderLineInOrderline.ArticleDescription, actualOrderLineInOrderline.ArticleDescription);
					Assert.AreEqual(expectedOrderLineInOrderline.ArticleId, actualOrderLineInOrderline.ArticleId);
					Assert.AreEqual(expectedOrderLineInOrderline.NetUnitPrice, actualOrderLineInOrderline.NetUnitPrice);
					Assert.AreEqual(expectedOrderLineInOrderline.Quantity, actualOrderLineInOrderline.Quantity);
					Assert.AreEqual(expectedOrderLineInOrderline.UnitPrice, actualOrderLineInOrderline.UnitPrice);
					Assert.AreEqual(expectedOrderLineInOrderline.VatCategory, actualOrderLineInOrderline.VatCategory);
			}
			Assert.AreEqual(obj.OrderNumber, deserialized.OrderNumber);
			Assert.AreEqual(obj.Password, deserialized.Password);
			Assert.AreEqual(obj.PortfolioId, deserialized.PortfolioId);
			Assert.AreEqual(obj.PurchaseId, deserialized.PurchaseId);
			Assert.AreEqual(obj.ShipToAddress.City, deserialized.ShipToAddress.City);
			Assert.AreEqual(obj.ShipToAddress.HouseNumber, deserialized.ShipToAddress.HouseNumber);
			Assert.AreEqual(obj.ShipToAddress.HouseNumberAddition, deserialized.ShipToAddress.HouseNumberAddition);
			Assert.AreEqual(obj.ShipToAddress.IsoCountryCode, deserialized.ShipToAddress.IsoCountryCode);
			Assert.AreEqual(obj.ShipToAddress.PostalCode, deserialized.ShipToAddress.PostalCode);
			// Check only date and time up to seconds.. Json.NET does not save milliseconds.
			Assert.AreEqual(
				new DateTime(obj.ShipToAddress.Reference.DateOfBirth.Year, obj.ShipToAddress.Reference.DateOfBirth.Month, obj.ShipToAddress.Reference.DateOfBirth.Day, obj.ShipToAddress.Reference.DateOfBirth.Hour, obj.ShipToAddress.Reference.DateOfBirth.Minute, obj.ShipToAddress.Reference.DateOfBirth.Second),
				new DateTime(deserialized.ShipToAddress.Reference.DateOfBirth.Year, deserialized.ShipToAddress.Reference.DateOfBirth.Month, deserialized.ShipToAddress.Reference.DateOfBirth.Day, deserialized.ShipToAddress.Reference.DateOfBirth.Hour, deserialized.ShipToAddress.Reference.DateOfBirth.Minute, deserialized.ShipToAddress.Reference.DateOfBirth.Second));
			Assert.AreEqual(obj.ShipToAddress.Reference.EmailAddress, deserialized.ShipToAddress.Reference.EmailAddress);
			Assert.AreEqual(obj.ShipToAddress.Reference.Gender, deserialized.ShipToAddress.Reference.Gender);
			Assert.AreEqual(obj.ShipToAddress.Reference.Initials, deserialized.ShipToAddress.Reference.Initials);
			Assert.AreEqual(obj.ShipToAddress.Reference.IsoLanguage, deserialized.ShipToAddress.Reference.IsoLanguage);
			Assert.AreEqual(obj.ShipToAddress.Reference.LastName, deserialized.ShipToAddress.Reference.LastName);
			Assert.AreEqual(obj.ShipToAddress.Reference.PhoneNumber1, deserialized.ShipToAddress.Reference.PhoneNumber1);
			Assert.AreEqual(obj.ShipToAddress.Reference.PhoneNumber2, deserialized.ShipToAddress.Reference.PhoneNumber2);
			Assert.AreEqual(obj.ShipToAddress.Region, deserialized.ShipToAddress.Region);
			Assert.AreEqual(obj.ShipToAddress.StreetName, deserialized.ShipToAddress.StreetName);
			Assert.AreEqual(obj.SuccessUrl, deserialized.SuccessUrl);
			Assert.AreEqual(obj.TotalOrderAmount, deserialized.TotalOrderAmount);
		}
	}
}
