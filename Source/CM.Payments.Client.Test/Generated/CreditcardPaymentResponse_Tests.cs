using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CM.Payments.Client.Model;
using System.Reflection;
using Newtonsoft.Json;
using CM.Payments.Client.Converters;
using CM.Payments.Client.Enums;

//<auto-generated>
//	IMPORTANT NOTE:
//	This code is generated by MessageUnitTestGenerator in this project.
//	Date and time: 06-04-2018 14:52:28
//
//	Changes to this file may cause incorrect behavior and will be lost on the next code generation.
//</auto-generated>
namespace CM.Payments.Client.Test
{
	[TestClass, ExcludeFromCodeCoverage]
	public partial class CreditcardPaymentResponseTests : BaseJsonConvertTests
	{
		public TestContext TestContext { get; set; }

		[TestMethod]
		public void CreditcardPaymentResponse()
		{
			var obj = new CreditcardPaymentResponse
			{
				Amount = 61,
				ChargeId = "Lorum_419",
				CreatedAt = DateTime.Now,
				Currency = "Lorum_372",
				Details = new CreditcardDetailsResponse
				{
					AuthenticationUrl = "Lorum_699",
					CallbackUrl = "Lorum_145",
					CancelledUrl = "Lorum_0",
					ExpiredUrl = "Lorum_244",
					FailedUrl = "Lorum_522",
					Issuer = "Lorum_321",
					Issuers = new []
					{
						"Lorum_966",
						"Lorum_240"
					},
					MaskedPan = "Lorum_798",
					PurchaseId = "Lorum_783",
					ReasonForFailure = "Lorum_787",
					Recurring = false,
					SuccessUrl = "Lorum_320"
				},
				DueDate = DateTime.Now,
				ExpiresAt = DateTime.Now,
				PaymentId = "Lorum_465",
				Recurring = true,
				RecurringId = "Lorum_179",
				ShortPaymentId = "Lorum_455",
				Status = "Lorum_394",
				Test = false,
				UpdatedAt = DateTime.Now
			};
			var deserialized = ConversionTest(obj);
			Assert.IsNotNull(deserialized);
			Assert.AreEqual(obj.ChargeId, deserialized.ChargeId);
			// Check only date and time up to seconds.. Json.NET does not save milliseconds.
			Assert.AreEqual(
				new DateTime(obj.CreatedAt.Year, obj.CreatedAt.Month, obj.CreatedAt.Day, obj.CreatedAt.Hour, obj.CreatedAt.Minute, obj.CreatedAt.Second),
				new DateTime(deserialized.CreatedAt.Year, deserialized.CreatedAt.Month, deserialized.CreatedAt.Day, deserialized.CreatedAt.Hour, deserialized.CreatedAt.Minute, deserialized.CreatedAt.Second));
			Assert.AreEqual(obj.Currency, deserialized.Currency);
			Assert.AreEqual(obj.Details.AuthenticationUrl, deserialized.Details.AuthenticationUrl);
			Assert.AreEqual(obj.Details.CallbackUrl, deserialized.Details.CallbackUrl);
			Assert.AreEqual(obj.Details.CancelledUrl, deserialized.Details.CancelledUrl);
			Assert.AreEqual(obj.Details.ExpiredUrl, deserialized.Details.ExpiredUrl);
			Assert.AreEqual(obj.Details.FailedUrl, deserialized.Details.FailedUrl);
			Assert.AreEqual(obj.Details.Issuer, deserialized.Details.Issuer);
			Assert.AreEqual(obj.Details.Issuers.IsFixedSize, deserialized.Details.Issuers.IsFixedSize);
			Assert.AreEqual(obj.Details.Issuers.IsReadOnly, deserialized.Details.Issuers.IsReadOnly);
			Assert.AreEqual(obj.Details.Issuers.IsSynchronized, deserialized.Details.Issuers.IsSynchronized);
			Assert.AreEqual(obj.Details.Issuers.Length, deserialized.Details.Issuers.Length);
			Assert.AreEqual(obj.Details.Issuers.LongLength, deserialized.Details.Issuers.LongLength);
			Assert.AreEqual(obj.Details.Issuers.Rank, deserialized.Details.Issuers.Rank);
			Assert.AreEqual(obj.Details.MaskedPan, deserialized.Details.MaskedPan);
			Assert.AreEqual(obj.Details.PurchaseId, deserialized.Details.PurchaseId);
			Assert.AreEqual(obj.Details.ReasonForFailure, deserialized.Details.ReasonForFailure);
			Assert.AreEqual(obj.Details.Recurring, deserialized.Details.Recurring);
			Assert.AreEqual(obj.Details.SuccessUrl, deserialized.Details.SuccessUrl);
			// Check only date and time up to seconds.. Json.NET does not save milliseconds.
			Assert.AreEqual(
				new DateTime(obj.DueDate.Year, obj.DueDate.Month, obj.DueDate.Day, obj.DueDate.Hour, obj.DueDate.Minute, obj.DueDate.Second),
				new DateTime(deserialized.DueDate.Year, deserialized.DueDate.Month, deserialized.DueDate.Day, deserialized.DueDate.Hour, deserialized.DueDate.Minute, deserialized.DueDate.Second));
			// Check only date and time up to seconds.. Json.NET does not save milliseconds.
			Assert.AreEqual(
				new DateTime(obj.ExpiresAt.Year, obj.ExpiresAt.Month, obj.ExpiresAt.Day, obj.ExpiresAt.Hour, obj.ExpiresAt.Minute, obj.ExpiresAt.Second),
				new DateTime(deserialized.ExpiresAt.Year, deserialized.ExpiresAt.Month, deserialized.ExpiresAt.Day, deserialized.ExpiresAt.Hour, deserialized.ExpiresAt.Minute, deserialized.ExpiresAt.Second));
			Assert.AreEqual(obj.PaymentId, deserialized.PaymentId);
			Assert.AreEqual(obj.Recurring, deserialized.Recurring);
			Assert.AreEqual(obj.RecurringId, deserialized.RecurringId);
			Assert.AreEqual(obj.ShortPaymentId, deserialized.ShortPaymentId);
			Assert.AreEqual(obj.Status, deserialized.Status);
			Assert.AreEqual(obj.Test, deserialized.Test);
			// Check only date and time up to seconds.. Json.NET does not save milliseconds.
			Assert.AreEqual(
				new DateTime(obj.UpdatedAt.Year, obj.UpdatedAt.Month, obj.UpdatedAt.Day, obj.UpdatedAt.Hour, obj.UpdatedAt.Minute, obj.UpdatedAt.Second),
				new DateTime(deserialized.UpdatedAt.Year, deserialized.UpdatedAt.Month, deserialized.UpdatedAt.Day, deserialized.UpdatedAt.Hour, deserialized.UpdatedAt.Minute, deserialized.UpdatedAt.Second));
		}
	}
}
