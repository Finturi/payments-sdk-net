using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CM.Payments.Client.Model;
using System.Reflection;
using CM.Payments.Client.Enums;

//<auto-generated>
//	IMPORTANT NOTE:
//	This code is generated by MessageUnitTestGenerator in this project.
//	Date and time: 06-04-2018 14:52:28
//
//	Changes to this file may cause incorrect behavior and will be lost on the next code generation.
//</auto-generated>
namespace CM.Payments.Client.Test
{
	[TestClass, ExcludeFromCodeCoverage]
	public partial class DirectDebitDetailsResponseTests : BaseJsonConvertTests
	{
		public TestContext TestContext { get; set; }

		[TestMethod]
		public void DirectDebitDetailsResponse()
		{
			var obj = new DirectDebitDetailsResponse
			{
				AuthenticationUrl = "Lorum_145",
				BankAccountNumber = "Lorum_976",
				CallbackUrl = "Lorum_665",
				CancelledUrl = "Lorum_574",
				Description = "Lorum_554",
				ExpiredUrl = "Lorum_251",
				FailedUrl = "Lorum_711",
				MandateId = "Lorum_50",
				MandateStartDate = DateTime.Now,
				Name = "Lorum_570",
				PurchaseId = "Lorum_30",
				ReversedOn = DateTime.Now,
				ReverseReasonCode = "Lorum_347",
				ReverseReasonDescription = "Lorum_102",
				SuccessUrl = "Lorum_204",
				TransactionDescription = "Lorum_185",
				TransactionId = "Lorum_947"
			};
			var deserialized = ConversionTest(obj);
			Assert.IsNotNull(deserialized);
			Assert.AreEqual(obj.AuthenticationUrl, deserialized.AuthenticationUrl);
			Assert.AreEqual(obj.BankAccountNumber, deserialized.BankAccountNumber);
			Assert.AreEqual(obj.CallbackUrl, deserialized.CallbackUrl);
			Assert.AreEqual(obj.CancelledUrl, deserialized.CancelledUrl);
			Assert.AreEqual(obj.Description, deserialized.Description);
			Assert.AreEqual(obj.ExpiredUrl, deserialized.ExpiredUrl);
			Assert.AreEqual(obj.FailedUrl, deserialized.FailedUrl);
			Assert.AreEqual(obj.MandateId, deserialized.MandateId);
			// Check only date and time up to seconds.. Json.NET does not save milliseconds.
			Assert.AreEqual(
				new DateTime(obj.MandateStartDate.Year, obj.MandateStartDate.Month, obj.MandateStartDate.Day),
				new DateTime(deserialized.MandateStartDate.Year, deserialized.MandateStartDate.Month, deserialized.MandateStartDate.Day));
			Assert.AreEqual(obj.Name, deserialized.Name);
			Assert.AreEqual(obj.PurchaseId, deserialized.PurchaseId);
			// Check only date and time up to seconds.. Json.NET does not save milliseconds.
			Assert.AreEqual(
				new DateTime(obj.ReversedOn.Year, obj.ReversedOn.Month, obj.ReversedOn.Day, obj.ReversedOn.Hour, obj.ReversedOn.Minute, obj.ReversedOn.Second),
				new DateTime(deserialized.ReversedOn.Year, deserialized.ReversedOn.Month, deserialized.ReversedOn.Day, deserialized.ReversedOn.Hour, deserialized.ReversedOn.Minute, deserialized.ReversedOn.Second));
			Assert.AreEqual(obj.ReverseReasonCode, deserialized.ReverseReasonCode);
			Assert.AreEqual(obj.ReverseReasonDescription, deserialized.ReverseReasonDescription);
			Assert.AreEqual(obj.SuccessUrl, deserialized.SuccessUrl);
			Assert.AreEqual(obj.TransactionDescription, deserialized.TransactionDescription);
			Assert.AreEqual(obj.TransactionId, deserialized.TransactionId);
		}
	}
}
