using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CM.Payments.Client.Model;
using System.Reflection;
using Newtonsoft.Json;
using CM.Payments.Client.Converters;
using CM.Payments.Client.Enums;

//<auto-generated>
//	IMPORTANT NOTE:
//	This code is generated by MessageUnitTestGenerator in this project.
//	Date and time: 06-04-2018 14:52:28
//
//	Changes to this file may cause incorrect behavior and will be lost on the next code generation.
//</auto-generated>
namespace CM.Payments.Client.Test
{
	[TestClass, ExcludeFromCodeCoverage]
	public partial class DirectDebitPaymentRequestTests : BaseJsonConvertTests
	{
		public TestContext TestContext { get; set; }

		[TestMethod]
		public void DirectDebitPaymentRequest()
		{
			var obj = new DirectDebitPaymentRequest
			{
				Amount = 68,
				Currency = "Lorum_121",
				Details = new DirectDebitDetailsRequest
				{
					BankAccountNumber = "Lorum_240",
					CallbackUrl = "Lorum_375",
					CancelledUrl = "Lorum_273",
					Description = "Lorum_215",
					ExpiredUrl = "Lorum_948",
					FailedUrl = "Lorum_737",
					MandateId = "Lorum_857",
					MandateStartDate = DateTime.Now,
					Name = "Lorum_32",
					PurchaseId = "Lorum_659",
					SuccessUrl = "Lorum_303",
					TransactionDescription = "Lorum_823"
				},
				DueDate = DateTime.Now,
				ExpiredAt = DateTime.UtcNow
			};
			var deserialized = ConversionTest(obj);
			Assert.IsNotNull(deserialized);
			Assert.AreEqual(obj.Amount, deserialized.Amount);
			Assert.AreEqual(obj.Currency, deserialized.Currency);
			Assert.AreEqual(obj.Details.BankAccountNumber, deserialized.Details.BankAccountNumber);
			Assert.AreEqual(obj.Details.CallbackUrl, deserialized.Details.CallbackUrl);
			Assert.AreEqual(obj.Details.CancelledUrl, deserialized.Details.CancelledUrl);
			Assert.AreEqual(obj.Details.Description, deserialized.Details.Description);
			Assert.AreEqual(obj.Details.ExpiredUrl, deserialized.Details.ExpiredUrl);
			Assert.AreEqual(obj.Details.FailedUrl, deserialized.Details.FailedUrl);
			Assert.AreEqual(obj.Details.MandateId, deserialized.Details.MandateId);
			// Check only date and time up to seconds.. Json.NET does not save milliseconds.
			Assert.AreEqual(
				new DateTime(obj.Details.MandateStartDate.Year, obj.Details.MandateStartDate.Month, obj.Details.MandateStartDate.Day),
				new DateTime(deserialized.Details.MandateStartDate.Year, deserialized.Details.MandateStartDate.Month, deserialized.Details.MandateStartDate.Day));
			Assert.AreEqual(obj.Details.Name, deserialized.Details.Name);
			Assert.AreEqual(obj.Details.PurchaseId, deserialized.Details.PurchaseId);
			Assert.AreEqual(obj.Details.SuccessUrl, deserialized.Details.SuccessUrl);
			Assert.AreEqual(obj.Details.TransactionDescription, deserialized.Details.TransactionDescription);
			// Check only date and time up to seconds.. Json.NET does not save milliseconds.
			Assert.AreEqual(obj.DueDate.HasValue, deserialized.DueDate.HasValue);
			if (obj.DueDate.HasValue && deserialized.DueDate.HasValue)
			{
				Assert.AreEqual(
					new DateTime(obj.DueDate.Value.Year, obj.DueDate.Value.Month, obj.DueDate.Value.Day, obj.DueDate.Value.Hour, obj.DueDate.Value.Minute, obj.DueDate.Value.Second),
					new DateTime(deserialized.DueDate.Value.Year, deserialized.DueDate.Value.Month, deserialized.DueDate.Value.Day, deserialized.DueDate.Value.Hour, deserialized.DueDate.Value.Minute, deserialized.DueDate.Value.Second));
			}
			// Check only date and time up to seconds.. Json.NET does not save milliseconds.
			Assert.AreEqual(
				new DateTime(obj.ExpiredAt.Year, obj.ExpiredAt.Month, obj.ExpiredAt.Day, obj.ExpiredAt.Hour, obj.ExpiredAt.Minute, obj.ExpiredAt.Second),
				new DateTime(deserialized.ExpiredAt.Year, deserialized.ExpiredAt.Month, deserialized.ExpiredAt.Day, deserialized.ExpiredAt.Hour, deserialized.ExpiredAt.Minute, deserialized.ExpiredAt.Second));
		}
	}
}
