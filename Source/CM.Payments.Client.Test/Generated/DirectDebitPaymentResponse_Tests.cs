using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CM.Payments.Client.Model;
using System.Reflection;
using Newtonsoft.Json;
using CM.Payments.Client.Converters;
using CM.Payments.Client.Enums;

//<auto-generated>
//	IMPORTANT NOTE:
//	This code is generated by MessageUnitTestGenerator in this project.
//	Date and time: 06-04-2018 14:52:28
//
//	Changes to this file may cause incorrect behavior and will be lost on the next code generation.
//</auto-generated>
namespace CM.Payments.Client.Test
{
	[TestClass, ExcludeFromCodeCoverage]
	public partial class DirectDebitPaymentResponseTests : BaseJsonConvertTests
	{
		public TestContext TestContext { get; set; }

		[TestMethod]
		public void DirectDebitPaymentResponse()
		{
			var obj = new DirectDebitPaymentResponse
			{
				Amount = 32,
				ChargeId = "Lorum_349",
				CreatedAt = DateTime.Now,
				Currency = "Lorum_18",
				Details = new DirectDebitDetailsResponse
				{
					AuthenticationUrl = "Lorum_20",
					BankAccountNumber = "Lorum_638",
					CallbackUrl = "Lorum_810",
					CancelledUrl = "Lorum_741",
					Description = "Lorum_746",
					ExpiredUrl = "Lorum_911",
					FailedUrl = "Lorum_963",
					MandateId = "Lorum_468",
					MandateStartDate = DateTime.Now,
					Name = "Lorum_404",
					PurchaseId = "Lorum_823",
					ReversedOn = DateTime.Now,
					ReverseReasonCode = "Lorum_539",
					ReverseReasonDescription = "Lorum_334",
					SuccessUrl = "Lorum_412",
					TransactionDescription = "Lorum_461",
					TransactionId = "Lorum_300"
				},
				DueDate = DateTime.Now,
				ExpiresAt = DateTime.Now,
				PaymentId = "Lorum_748",
				Recurring = true,
				RecurringId = "Lorum_215",
				ShortPaymentId = "Lorum_392",
				Status = "Lorum_377",
				Test = true,
				UpdatedAt = DateTime.Now
			};
			var deserialized = ConversionTest(obj);
			Assert.IsNotNull(deserialized);
			Assert.AreEqual(obj.ChargeId, deserialized.ChargeId);
			// Check only date and time up to seconds.. Json.NET does not save milliseconds.
			Assert.AreEqual(
				new DateTime(obj.CreatedAt.Year, obj.CreatedAt.Month, obj.CreatedAt.Day, obj.CreatedAt.Hour, obj.CreatedAt.Minute, obj.CreatedAt.Second),
				new DateTime(deserialized.CreatedAt.Year, deserialized.CreatedAt.Month, deserialized.CreatedAt.Day, deserialized.CreatedAt.Hour, deserialized.CreatedAt.Minute, deserialized.CreatedAt.Second));
			Assert.AreEqual(obj.Currency, deserialized.Currency);
			Assert.AreEqual(obj.Details.AuthenticationUrl, deserialized.Details.AuthenticationUrl);
			Assert.AreEqual(obj.Details.BankAccountNumber, deserialized.Details.BankAccountNumber);
			Assert.AreEqual(obj.Details.CallbackUrl, deserialized.Details.CallbackUrl);
			Assert.AreEqual(obj.Details.CancelledUrl, deserialized.Details.CancelledUrl);
			Assert.AreEqual(obj.Details.Description, deserialized.Details.Description);
			Assert.AreEqual(obj.Details.ExpiredUrl, deserialized.Details.ExpiredUrl);
			Assert.AreEqual(obj.Details.FailedUrl, deserialized.Details.FailedUrl);
			Assert.AreEqual(obj.Details.MandateId, deserialized.Details.MandateId);
			// Check only date and time up to seconds.. Json.NET does not save milliseconds.
			Assert.AreEqual(
				new DateTime(obj.Details.MandateStartDate.Year, obj.Details.MandateStartDate.Month, obj.Details.MandateStartDate.Day),
				new DateTime(deserialized.Details.MandateStartDate.Year, deserialized.Details.MandateStartDate.Month, deserialized.Details.MandateStartDate.Day));
			Assert.AreEqual(obj.Details.Name, deserialized.Details.Name);
			Assert.AreEqual(obj.Details.PurchaseId, deserialized.Details.PurchaseId);
			// Check only date and time up to seconds.. Json.NET does not save milliseconds.
			Assert.AreEqual(
				new DateTime(obj.Details.ReversedOn.Year, obj.Details.ReversedOn.Month, obj.Details.ReversedOn.Day, obj.Details.ReversedOn.Hour, obj.Details.ReversedOn.Minute, obj.Details.ReversedOn.Second),
				new DateTime(deserialized.Details.ReversedOn.Year, deserialized.Details.ReversedOn.Month, deserialized.Details.ReversedOn.Day, deserialized.Details.ReversedOn.Hour, deserialized.Details.ReversedOn.Minute, deserialized.Details.ReversedOn.Second));
			Assert.AreEqual(obj.Details.ReverseReasonCode, deserialized.Details.ReverseReasonCode);
			Assert.AreEqual(obj.Details.ReverseReasonDescription, deserialized.Details.ReverseReasonDescription);
			Assert.AreEqual(obj.Details.SuccessUrl, deserialized.Details.SuccessUrl);
			Assert.AreEqual(obj.Details.TransactionDescription, deserialized.Details.TransactionDescription);
			Assert.AreEqual(obj.Details.TransactionId, deserialized.Details.TransactionId);
			// Check only date and time up to seconds.. Json.NET does not save milliseconds.
			Assert.AreEqual(
				new DateTime(obj.DueDate.Year, obj.DueDate.Month, obj.DueDate.Day, obj.DueDate.Hour, obj.DueDate.Minute, obj.DueDate.Second),
				new DateTime(deserialized.DueDate.Year, deserialized.DueDate.Month, deserialized.DueDate.Day, deserialized.DueDate.Hour, deserialized.DueDate.Minute, deserialized.DueDate.Second));
			// Check only date and time up to seconds.. Json.NET does not save milliseconds.
			Assert.AreEqual(
				new DateTime(obj.ExpiresAt.Year, obj.ExpiresAt.Month, obj.ExpiresAt.Day, obj.ExpiresAt.Hour, obj.ExpiresAt.Minute, obj.ExpiresAt.Second),
				new DateTime(deserialized.ExpiresAt.Year, deserialized.ExpiresAt.Month, deserialized.ExpiresAt.Day, deserialized.ExpiresAt.Hour, deserialized.ExpiresAt.Minute, deserialized.ExpiresAt.Second));
			Assert.AreEqual(obj.PaymentId, deserialized.PaymentId);
			Assert.AreEqual(obj.Recurring, deserialized.Recurring);
			Assert.AreEqual(obj.RecurringId, deserialized.RecurringId);
			Assert.AreEqual(obj.ShortPaymentId, deserialized.ShortPaymentId);
			Assert.AreEqual(obj.Status, deserialized.Status);
			Assert.AreEqual(obj.Test, deserialized.Test);
			// Check only date and time up to seconds.. Json.NET does not save milliseconds.
			Assert.AreEqual(
				new DateTime(obj.UpdatedAt.Year, obj.UpdatedAt.Month, obj.UpdatedAt.Day, obj.UpdatedAt.Hour, obj.UpdatedAt.Minute, obj.UpdatedAt.Second),
				new DateTime(deserialized.UpdatedAt.Year, deserialized.UpdatedAt.Month, deserialized.UpdatedAt.Day, deserialized.UpdatedAt.Hour, deserialized.UpdatedAt.Minute, deserialized.UpdatedAt.Second));
		}
	}
}
