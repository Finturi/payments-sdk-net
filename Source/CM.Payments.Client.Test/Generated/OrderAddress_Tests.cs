using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CM.Payments.Client.Model;
using CM.Payments.Client.Enums;

//<auto-generated>
//	IMPORTANT NOTE:
//	This code is generated by MessageUnitTestGenerator in this project.
//	Date and time: 06-04-2018 14:52:28
//
//	Changes to this file may cause incorrect behavior and will be lost on the next code generation.
//</auto-generated>
namespace CM.Payments.Client.Test
{
	[TestClass, ExcludeFromCodeCoverage]
	public partial class OrderAddressTests : BaseJsonConvertTests
	{
		public TestContext TestContext { get; set; }

		[TestMethod]
		public void OrderAddress()
		{
			var obj = new AfterPayDetailsRequest.OrderAddress
			{
				City = "Lorum_208",
				HouseNumber = 8,
				HouseNumberAddition = "Lorum_514",
				IsoCountryCode = "Lorum_650",
				PostalCode = "Lorum_974",
				Reference = new AfterPayDetailsRequest.OrderAddress.ReferencePerson
				{
					DateOfBirth = DateTime.Now,
					EmailAddress = "Lorum_311",
					Gender = "Lorum_157",
					Initials = "Lorum_276",
					IsoLanguage = "Lorum_366",
					LastName = "Lorum_259",
					PhoneNumber1 = "Lorum_482",
					PhoneNumber2 = "Lorum_853"
				},
				Region = "Lorum_35",
				StreetName = "Lorum_87"
			};
			var deserialized = ConversionTest(obj);
			Assert.IsNotNull(deserialized);
			Assert.AreEqual(obj.City, deserialized.City);
			Assert.AreEqual(obj.HouseNumber, deserialized.HouseNumber);
			Assert.AreEqual(obj.HouseNumberAddition, deserialized.HouseNumberAddition);
			Assert.AreEqual(obj.IsoCountryCode, deserialized.IsoCountryCode);
			Assert.AreEqual(obj.PostalCode, deserialized.PostalCode);
			// Check only date and time up to seconds.. Json.NET does not save milliseconds.
			Assert.AreEqual(
				new DateTime(obj.Reference.DateOfBirth.Year, obj.Reference.DateOfBirth.Month, obj.Reference.DateOfBirth.Day, obj.Reference.DateOfBirth.Hour, obj.Reference.DateOfBirth.Minute, obj.Reference.DateOfBirth.Second),
				new DateTime(deserialized.Reference.DateOfBirth.Year, deserialized.Reference.DateOfBirth.Month, deserialized.Reference.DateOfBirth.Day, deserialized.Reference.DateOfBirth.Hour, deserialized.Reference.DateOfBirth.Minute, deserialized.Reference.DateOfBirth.Second));
			Assert.AreEqual(obj.Reference.EmailAddress, deserialized.Reference.EmailAddress);
			Assert.AreEqual(obj.Reference.Gender, deserialized.Reference.Gender);
			Assert.AreEqual(obj.Reference.Initials, deserialized.Reference.Initials);
			Assert.AreEqual(obj.Reference.IsoLanguage, deserialized.Reference.IsoLanguage);
			Assert.AreEqual(obj.Reference.LastName, deserialized.Reference.LastName);
			Assert.AreEqual(obj.Reference.PhoneNumber1, deserialized.Reference.PhoneNumber1);
			Assert.AreEqual(obj.Reference.PhoneNumber2, deserialized.Reference.PhoneNumber2);
			Assert.AreEqual(obj.Region, deserialized.Region);
			Assert.AreEqual(obj.StreetName, deserialized.StreetName);
		}
	}
}
